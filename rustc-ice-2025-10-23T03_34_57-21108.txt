thread 'rustc' panicked at /rustc-dev/695857bc3f72ec4f59c79f323460fe488c38a53f/compiler/rustc_query_system/src/query/plumbing.rs:739:9:
Found unstable fingerprints for lints_that_dont_need_to_run(0-0): UnordSet { inner: {LintId { lint: Lint { name: "rustc::SYMBOL_INTERN_STRING_LITERAL", default_level: Allow, desc: "Forbid uses of string literals in `Symbol::intern`, suggesting preinterning instead", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "IF_LET_RESCOPE", default_level: Allow, desc: "`if let` assigns a shorter lifetime to temporary values being pattern-matched against in Edition 2024 and rewriting in `match` is an option to preserve the semantics up to Edition 2021", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/temporary-if-let-scope.html>", reason: EditionSemanticsChange(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES", default_level: Allow, desc: "detects closures affected by Rust 2021 changes", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "", reason: EditionSemanticsChange(Edition2021), explain_reason: false, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "RUST_2024_INCOMPATIBLE_PAT", default_level: Allow, desc: "detects patterns whose meaning will change in Rust 2024", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/match-ergonomics.html>", reason: EditionSemanticsChange(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX", default_level: Allow, desc: "identifiers that will be parsed as a prefix in Rust 2021", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2021/reserving-syntax.html>", reason: EditionError(Edition2021), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: true, eval_always: false } }, LintId { lint: Lint { name: "rustc::DIRECT_USE_OF_RUSTC_TYPE_IR", default_level: Allow, desc: "usage `rustc_type_ir` abstraction outside of trait system", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "rustc::USAGE_OF_TYPE_IR_TRAITS", default_level: Allow, desc: "usage `rustc_type_ir`-specific abstraction traits outside of trait system", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "MISSING_DEBUG_IMPLEMENTATIONS", default_level: Allow, desc: "detects missing implementations of Debug", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "ELIDED_LIFETIMES_IN_PATHS", default_level: Allow, desc: "hidden lifetime parameters in types are deprecated", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "SUPERTRAIT_ITEM_SHADOWING_DEFINITION", default_level: Allow, desc: "detects when a supertrait item is shadowed by a subtrait item", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("supertrait_item_shadowing"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "rustc::SPAN_USE_EQ_CTXT", default_level: Allow, desc: "forbid uses of `==` with `Span::ctxt`, suggest `Span::eq_ctxt` instead", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "KEYWORD_IDENTS_2018", default_level: Allow, desc: "detects edition keywords being used as an identifier", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "issue #49716 <https://github.com/rust-lang/rust/issues/49716>", reason: EditionError(Edition2018), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "NON_EXHAUSTIVE_OMITTED_PATTERNS", default_level: Allow, desc: "detect when patterns of types marked `non_exhaustive` are missed", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("non_exhaustive_omitted_patterns_lint"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "DEREF_INTO_DYN_SUPERTRAIT", default_level: Allow, desc: "`Deref` implementation with a supertrait trait object for output is shadowed by trait upcasting", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "FUZZY_PROVENANCE_CASTS", default_level: Allow, desc: "a fuzzy integer to pointer cast is used", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("strict_provenance_lints"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "LINKER_MESSAGES", default_level: Allow, desc: "warnings emitted at runtime by the target-specific linker program", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNUSED_QUALIFICATIONS", default_level: Allow, desc: "detects unnecessarily qualified names", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNUSED_IMPORT_BRACES", default_level: Allow, desc: "unnecessary braces around an imported item", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNUSED_RESULTS", default_level: Allow, desc: "unused result of an expression in a statement", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "RUST_2024_PRELUDE_COLLISIONS", default_level: Allow, desc: "detects the usage of trait methods which are ambiguous with traits added to the prelude in future editions", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/prelude.html>", reason: EditionError(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "TAIL_EXPR_DROP_ORDER", default_level: Allow, desc: "Detect and warn on significant change in drop order in tail expression location", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/temporary-tail-expr-scope.html>", reason: EditionSemanticsChange(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "DEPRECATED_IN_FUTURE", default_level: Allow, desc: "detects use of items that will be deprecated in a future version", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "RUST_2024_GUARDED_STRING_INCOMPATIBLE_SYNTAX", default_level: Allow, desc: "will be parsed as a guarded string in Rust 2024", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/reserved-syntax.html>", reason: EditionError(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: true, eval_always: false } }, LintId { lint: Lint { name: "rustc::LINT_PASS_IMPL_WITHOUT_MACRO", default_level: Allow, desc: "`impl LintPass` without the `declare_lint_pass!` or `impl_lint_pass!` macros", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "CLOSURE_RETURNING_ASYNC_BLOCK", default_level: Allow, desc: "closure that returns `async {}` could be rewritten as an async closure", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "rustc::USAGE_OF_QUALIFIED_TY", default_level: Allow, desc: "using `ty::{Ty,TyCtxt}` instead of importing it", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "MISSING_UNSAFE_ON_EXTERN", default_level: Allow, desc: "detects missing unsafe keyword on extern declarations", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-extern.html>", reason: EditionError(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "RUST_2021_INCOMPATIBLE_OR_PATTERNS", default_level: Allow, desc: "detects usage of old versions of or-patterns", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2021/or-patterns-macro-rules.html>", reason: EditionError(Edition2021), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNQUALIFIED_LOCAL_IMPORTS", default_level: Allow, desc: "`use` of a local item without leading `self::`, `super::`, or `crate::`", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("unqualified_local_imports"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNNAMEABLE_TYPES", default_level: Allow, desc: "effective visibility of a type is larger than the area in which it can be named", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "MACRO_USE_EXTERN_CRATE", default_level: Allow, desc: "the `#[macro_use]` attribute is now deprecated in favor of using macros via the module system", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "IMPL_TRAIT_OVERCAPTURES", default_level: Allow, desc: "`impl Trait` will capture more lifetimes than possibly intended in edition 2024", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/rpit-lifetime-capture.html>", reason: EditionSemanticsChange(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNREACHABLE_PUB", default_level: Allow, desc: "`pub` items not reachable from crate root", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "MISSING_DOCS", default_level: Allow, desc: "detects missing documentation for public members", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "VARIANT_SIZE_DIFFERENCES", default_level: Allow, desc: "detects enums with widely varying variant sizes", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "SINGLE_USE_LIFETIMES", default_level: Allow, desc: "detects lifetime parameters that are only used once", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "RUST_2021_PRELUDE_COLLISIONS", default_level: Allow, desc: "detects the usage of trait methods which are ambiguous with traits added to the prelude in future editions", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2021/prelude.html>", reason: EditionError(Edition2021), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "rustc::NON_GLOB_IMPORT_OF_TYPE_IR_INHERENT", default_level: Allow, desc: "non-glob import of `rustc_type_ir::inherent`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "rustc::UNTRACKED_QUERY_INFORMATION", default_level: Allow, desc: "require explicit opt-in when accessing information not tracked by the query system", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "REDUNDANT_LIFETIMES", default_level: Allow, desc: "detects lifetime parameters that are redundant because they are equal to some other named lifetime", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNIT_BINDINGS", default_level: Allow, desc: "binding is useless because it has the unit `()` type", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNUSED_MACRO_RULES", default_level: Allow, desc: "detects macro rules that were not used", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNUSED_CRATE_DEPENDENCIES", default_level: Allow, desc: "crate dependencies that are never used", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: true, eval_always: false } }, LintId { lint: Lint { name: "ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE", default_level: Allow, desc: "fully qualified paths that start with a module name instead of `crate`, `self`, or an extern crate name", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "issue #53130 <https://github.com/rust-lang/rust/issues/53130>", reason: EditionError(Edition2018), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "rustc::USAGE_OF_TY_TYKIND", default_level: Allow, desc: "usage of `ty::TyKind` outside of the `ty::sty` module", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "MISSING_COPY_IMPLEMENTATIONS", default_level: Allow, desc: "detects potentially-forgotten implementations of `Copy`", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "rustc::USAGE_OF_TYPE_IR_INHERENT", default_level: Allow, desc: "usage `rustc_type_ir::inherent` outside of trait system", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "EDITION_2024_EXPR_FRAGMENT_SPECIFIER", default_level: Allow, desc: "The `expr` fragment specifier will accept more expressions in the 2024 edition. To keep the existing behavior, use the `expr_2021` fragment specifier.", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "Migration Guide <https://doc.rust-lang.org/edition-guide/rust-2024/macro-fragment-specifiers.html>", reason: EditionSemanticsChange(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "SUPERTRAIT_ITEM_SHADOWING_USAGE", default_level: Allow, desc: "detects when a supertrait item is shadowed by a subtrait item", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("supertrait_item_shadowing"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "MUST_NOT_SUSPEND", default_level: Allow, desc: "use of a `#[must_not_suspend]` value across a yield point", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("must_not_suspend"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "LOSSY_PROVENANCE_CASTS", default_level: Allow, desc: "a lossy pointer to integer cast is used", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("strict_provenance_lints"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "EXPLICIT_OUTLIVES_REQUIREMENTS", default_level: Allow, desc: "outlives requirements can be inferred", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "TRIVIAL_NUMERIC_CASTS", default_level: Allow, desc: "detects trivial casts of numeric types which could be removed", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "AMBIGUOUS_NEGATIVE_LITERALS", default_level: Allow, desc: "ambiguous negative literals operations", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "IMPL_TRAIT_REDUNDANT_CAPTURES", default_level: Allow, desc: "redundant precise-capturing `use<...>` syntax on an `impl Trait`", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNUSED_EXTERN_CRATES", default_level: Allow, desc: "extern crates that are never used", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "META_VARIABLE_MISUSE", default_level: Allow, desc: "possible meta-variable misuse at macro definition", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "rustc::IMPLICIT_SYSROOT_CRATE_IMPORT", default_level: Allow, desc: "Forbid uses of non-sysroot crates in `extern crate`", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNSAFE_ATTR_OUTSIDE_UNSAFE", default_level: Allow, desc: "detects unsafe attributes outside of unsafe", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-attributes.html>", reason: EditionError(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "LET_UNDERSCORE_DROP", default_level: Allow, desc: "non-binding let on a type that has a destructor", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "NON_ASCII_IDENTS", default_level: Allow, desc: "detects non-ASCII identifiers", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: true, eval_always: false } }, LintId { lint: Lint { name: "rustc::POTENTIAL_QUERY_INSTABILITY", default_level: Allow, desc: "require explicit opt-in when using potentially unstable methods or functions", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "rustc::DEFAULT_HASH_TYPES", default_level: Allow, desc: "forbid HashMap and HashSet and suggest the FxHash* variants", edition_lint_opts: None, report_in_external_macro: true, future_incompatible: None, is_externally_loaded: true, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "REDUNDANT_IMPORTS", default_level: Allow, desc: "imports that are redundant due to being imported already", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "KEYWORD_IDENTS_2024", default_level: Allow, desc: "detects edition keywords being used as an identifier", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/gen-keyword.html>", reason: EditionError(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "MULTIPLE_SUPERTRAIT_UPCASTABLE", default_level: Allow, desc: "detect when a dyn-compatible trait has multiple supertraits", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: Some("multiple_supertrait_upcastable"), crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNUSED_LIFETIMES", default_level: Allow, desc: "detects lifetime parameters that are never used", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNSTABLE_FEATURES", default_level: Allow, desc: "enabling unstable features", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "UNSAFE_OP_IN_UNSAFE_FN", default_level: Allow, desc: "unsafe operations in unsafe functions without an explicit unsafe block are deprecated", edition_lint_opts: Some((Edition2024, Warn)), report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>", reason: EditionSemanticsChange(Edition2024), explain_reason: false, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "FFI_UNWIND_CALLS", default_level: Allow, desc: "call to foreign functions or function pointers with FFI-unwind ABI", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "TRIVIAL_CASTS", default_level: Allow, desc: "detects trivial casts which could be removed", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: None, is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }, LintId { lint: Lint { name: "DEPRECATED_SAFE_2024", default_level: Allow, desc: "detects unsafe functions being used as safe functions", edition_lint_opts: None, report_in_external_macro: false, future_incompatible: Some(FutureIncompatibleInfo { reference: "<https://doc.rust-lang.org/edition-guide/rust-2024/newly-unsafe-functions.html>", reason: EditionError(Edition2024), explain_reason: true, report_in_deps: false }), is_externally_loaded: false, feature_gate: None, crate_level_only: false, eval_always: false } }} }
stack backtrace:
   0:        0x11083030c - std::backtrace::Backtrace::create::hd676e85df86d17be
   1:        0x10e84fe24 - std[43efcd4cb70c9937]::panicking::update_hook::<alloc[2d2de700b789187f]::boxed::Box<rustc_driver_impl[d3554438db029a85]::install_ice_hook::{closure#1}>>::{closure#0}
   2:        0x110831238 - std::panicking::panic_with_hook::h6bb7bd77d6bef536
   3:        0x110830ee8 - std::panicking::panic_handler::{{closure}}::h58d6a5e4a4254da2
   4:        0x11082a5a4 - std::sys::backtrace::__rust_end_short_backtrace::h5aeac219d768ab0f
   5:        0x11080ea60 - __rustc[84e5866a5dd7d12b]::rust_begin_unwind
   6:        0x113599470 - core::panicking::panic_fmt::h4da5ef1cb0b310e8
   7:        0x11366b208 - rustc_query_system[788110d582af842f]::query::plumbing::incremental_verify_ich_failed::<rustc_middle[d54905a5aa3d050b]::ty::context::TyCtxt>
   8:        0x10fdb74c4 - rustc_query_system[788110d582af842f]::query::plumbing::incremental_verify_ich::<rustc_middle[d54905a5aa3d050b]::ty::context::TyCtxt, rustc_middle[d54905a5aa3d050b]::query::erase::Erased<[u8; 8usize]>>
   9:        0x10fd381e0 - rustc_query_system[788110d582af842f]::query::plumbing::try_execute_query::<rustc_query_impl[2de7e5bbe2077ad0]::DynamicConfig<rustc_query_system[788110d582af842f]::query::caches::SingleCache<rustc_middle[d54905a5aa3d050b]::query::erase::Erased<[u8; 8usize]>>, false, false, false>, rustc_query_impl[2de7e5bbe2077ad0]::plumbing::QueryCtxt, true>
  10:        0x10fe96f94 - rustc_query_impl[2de7e5bbe2077ad0]::query_impl::lints_that_dont_need_to_run::get_query_incr::__rust_end_short_backtrace
  11:        0x10ebd9b70 - rustc_hir_analysis[ef67cb3df1034a56]::check::region::resolve_block
  12:        0x10ebd9108 - rustc_hir_analysis[ef67cb3df1034a56]::check::region::resolve_expr
  13:        0x10ebd9fdc - rustc_hir_analysis[ef67cb3df1034a56]::check::region::region_scope_tree
  14:        0x10fd0eb64 - rustc_query_impl[2de7e5bbe2077ad0]::plumbing::__rust_begin_short_backtrace::<rustc_query_impl[2de7e5bbe2077ad0]::query_impl::region_scope_tree::dynamic_query::{closure#2}::{closure#0}, rustc_middle[d54905a5aa3d050b]::query::erase::Erased<[u8; 8usize]>>
  15:        0x10fd2b09c - rustc_query_system[788110d582af842f]::query::plumbing::try_execute_query::<rustc_query_impl[2de7e5bbe2077ad0]::DynamicConfig<rustc_query_system[788110d582af842f]::query::caches::DefIdCache<rustc_middle[d54905a5aa3d050b]::query::erase::Erased<[u8; 8usize]>>, false, false, false>, rustc_query_impl[2de7e5bbe2077ad0]::plumbing::QueryCtxt, true>
  16:        0x10fe7fb58 - rustc_query_impl[2de7e5bbe2077ad0]::query_impl::region_scope_tree::get_query_incr::__rust_end_short_backtrace
  17:        0x10edd99d8 - rustc_hir_typeck[1976efdb6b53acd6]::typeck_with_inspect::{closure#0}
  18:        0x10edf0c3c - rustc_hir_typeck[1976efdb6b53acd6]::typeck
  19:        0x10fd12468 - rustc_query_impl[2de7e5bbe2077ad0]::plumbing::__rust_begin_short_backtrace::<rustc_query_impl[2de7e5bbe2077ad0]::query_impl::typeck::dynamic_query::{closure#2}::{closure#0}, rustc_middle[d54905a5aa3d050b]::query::erase::Erased<[u8; 8usize]>>
  20:        0x10fdaf1f4 - rustc_query_system[788110d582af842f]::query::plumbing::try_execute_query::<rustc_query_impl[2de7e5bbe2077ad0]::DynamicConfig<rustc_data_structures[e0e22be03ef32be9]::vec_cache::VecCache<rustc_span[5112e3d1de59f39b]::def_id::LocalDefId, rustc_middle[d54905a5aa3d050b]::query::erase::Erased<[u8; 8usize]>, rustc_query_system[788110d582af842f]::dep_graph::graph::DepNodeIndex>, false, false, false>, rustc_query_impl[2de7e5bbe2077ad0]::plumbing::QueryCtxt, true>
  21:        0x10fcffbd4 - rustc_query_impl[2de7e5bbe2077ad0]::plumbing::force_from_dep_node::<rustc_query_impl[2de7e5bbe2077ad0]::DynamicConfig<rustc_data_structures[e0e22be03ef32be9]::vec_cache::VecCache<rustc_span[5112e3d1de59f39b]::def_id::LocalDefId, rustc_middle[d54905a5aa3d050b]::query::erase::Erased<[u8; 8usize]>, rustc_query_system[788110d582af842f]::dep_graph::graph::DepNodeIndex>, false, false, false>>
  22:        0x10ffb2044 - <rustc_query_impl[2de7e5bbe2077ad0]::plumbing::query_callback<rustc_query_impl[2de7e5bbe2077ad0]::query_impl::typeck::QueryType>::{closure#0} as core[1d080ea9effa756f]::ops::function::FnOnce<(rustc_middle[d54905a5aa3d050b]::ty::context::TyCtxt, rustc_query_system[788110d582af842f]::dep_graph::dep_node::DepNode, rustc_query_system[788110d582af842f]::dep_graph::serialized::SerializedDepNodeIndex)>>::call_once
  23:        0x10fcc7880 - <rustc_query_system[788110d582af842f]::dep_graph::graph::DepGraphData<rustc_middle[d54905a5aa3d050b]::dep_graph::DepsType>>::try_mark_previous_green::<rustc_query_impl[2de7e5bbe2077ad0]::plumbing::QueryCtxt>
  24:        0x10fcc782c - <rustc_query_system[788110d582af842f]::dep_graph::graph::DepGraphData<rustc_middle[d54905a5aa3d050b]::dep_graph::DepsType>>::try_mark_previous_green::<rustc_query_impl[2de7e5bbe2077ad0]::plumbing::QueryCtxt>
  25:        0x10fcc782c - <rustc_query_system[788110d582af842f]::dep_graph::graph::DepGraphData<rustc_middle[d54905a5aa3d050b]::dep_graph::DepsType>>::try_mark_previous_green::<rustc_query_impl[2de7e5bbe2077ad0]::plumbing::QueryCtxt>
  26:        0x10fcc782c - <rustc_query_system[788110d582af842f]::dep_graph::graph::DepGraphData<rustc_middle[d54905a5aa3d050b]::dep_graph::DepsType>>::try_mark_previous_green::<rustc_query_impl[2de7e5bbe2077ad0]::plumbing::QueryCtxt>
  27:        0x10fcc782c - <rustc_query_system[788110d582af842f]::dep_graph::graph::DepGraphData<rustc_middle[d54905a5aa3d050b]::dep_graph::DepsType>>::try_mark_previous_green::<rustc_query_impl[2de7e5bbe2077ad0]::plumbing::QueryCtxt>
  28:        0x10fcc782c - <rustc_query_system[788110d582af842f]::dep_graph::graph::DepGraphData<rustc_middle[d54905a5aa3d050b]::dep_graph::DepsType>>::try_mark_previous_green::<rustc_query_impl[2de7e5bbe2077ad0]::plumbing::QueryCtxt>
  29:        0x10fcc782c - <rustc_query_system[788110d582af842f]::dep_graph::graph::DepGraphData<rustc_middle[d54905a5aa3d050b]::dep_graph::DepsType>>::try_mark_previous_green::<rustc_query_impl[2de7e5bbe2077ad0]::plumbing::QueryCtxt>
  30:        0x10fcc782c - <rustc_query_system[788110d582af842f]::dep_graph::graph::DepGraphData<rustc_middle[d54905a5aa3d050b]::dep_graph::DepsType>>::try_mark_previous_green::<rustc_query_impl[2de7e5bbe2077ad0]::plumbing::QueryCtxt>
  31:        0x10fcc782c - <rustc_query_system[788110d582af842f]::dep_graph::graph::DepGraphData<rustc_middle[d54905a5aa3d050b]::dep_graph::DepsType>>::try_mark_previous_green::<rustc_query_impl[2de7e5bbe2077ad0]::plumbing::QueryCtxt>
  32:        0x10fcc76d8 - <rustc_query_system[788110d582af842f]::dep_graph::graph::DepGraphData<rustc_middle[d54905a5aa3d050b]::dep_graph::DepsType>>::try_mark_green::<rustc_query_impl[2de7e5bbe2077ad0]::plumbing::QueryCtxt>
  33:        0x10fd134cc - rustc_query_system[788110d582af842f]::query::plumbing::ensure_must_run::<rustc_query_impl[2de7e5bbe2077ad0]::DynamicConfig<rustc_query_system[788110d582af842f]::query::caches::SingleCache<rustc_middle[d54905a5aa3d050b]::query::erase::Erased<[u8; 12usize]>>, false, false, false>, rustc_query_impl[2de7e5bbe2077ad0]::plumbing::QueryCtxt>
  34:        0x10fe70208 - rustc_query_impl[2de7e5bbe2077ad0]::query_impl::check_type_wf::get_query_incr::__rust_end_short_backtrace
  35:        0x10eb2be50 - rustc_hir_analysis[ef67cb3df1034a56]::check_crate
  36:        0x10f147774 - rustc_interface[184c47375e4039c0]::passes::analysis
  37:        0x10fd124f8 - rustc_query_impl[2de7e5bbe2077ad0]::plumbing::__rust_begin_short_backtrace::<rustc_query_impl[2de7e5bbe2077ad0]::query_impl::analysis::dynamic_query::{closure#2}::{closure#0}, rustc_middle[d54905a5aa3d050b]::query::erase::Erased<[u8; 0usize]>>
  38:        0x10fd2e764 - rustc_query_system[788110d582af842f]::query::plumbing::try_execute_query::<rustc_query_impl[2de7e5bbe2077ad0]::DynamicConfig<rustc_query_system[788110d582af842f]::query::caches::SingleCache<rustc_middle[d54905a5aa3d050b]::query::erase::Erased<[u8; 0usize]>>, false, false, false>, rustc_query_impl[2de7e5bbe2077ad0]::plumbing::QueryCtxt, true>
  39:        0x10fea02d8 - rustc_query_impl[2de7e5bbe2077ad0]::query_impl::analysis::get_query_incr::__rust_end_short_backtrace
  40:        0x10e802f8c - rustc_interface[184c47375e4039c0]::passes::create_and_enter_global_ctxt::<core[1d080ea9effa756f]::option::Option<rustc_interface[184c47375e4039c0]::queries::Linker>, rustc_driver_impl[d3554438db029a85]::run_compiler::{closure#0}::{closure#2}>
  41:        0x10e84e1f8 - rustc_interface[184c47375e4039c0]::interface::run_compiler::<(), rustc_driver_impl[d3554438db029a85]::run_compiler::{closure#0}>::{closure#1}
  42:        0x10e83f574 - std[43efcd4cb70c9937]::sys::backtrace::__rust_begin_short_backtrace::<rustc_interface[184c47375e4039c0]::util::run_in_thread_with_globals<rustc_interface[184c47375e4039c0]::util::run_in_thread_pool_with_globals<rustc_interface[184c47375e4039c0]::interface::run_compiler<(), rustc_driver_impl[d3554438db029a85]::run_compiler::{closure#0}>::{closure#1}, ()>::{closure#0}, ()>::{closure#0}::{closure#0}, ()>
  43:        0x10e854a2c - <<std[43efcd4cb70c9937]::thread::Builder>::spawn_unchecked_<rustc_interface[184c47375e4039c0]::util::run_in_thread_with_globals<rustc_interface[184c47375e4039c0]::util::run_in_thread_pool_with_globals<rustc_interface[184c47375e4039c0]::interface::run_compiler<(), rustc_driver_impl[d3554438db029a85]::run_compiler::{closure#0}>::{closure#1}, ()>::{closure#0}, ()>::{closure#0}::{closure#0}, ()>::{closure#1} as core[1d080ea9effa756f]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}
  44:        0x110827074 - std::sys::thread::unix::Thread::new::thread_start::he9d576e603cd5690
  45:        0x190144c08 - __pthread_cond_wait


rustc version: 1.92.0-nightly (695857bc3 2025-10-21)
platform: aarch64-apple-darwin

query stack during panic:
#0 [lints_that_dont_need_to_run] Computing all lints that are explicitly enabled or with a default level greater than Allow
#1 [region_scope_tree] computing drop scopes for `components::button::<impl at src/components/button.rs:171:1: 171:27>::render`
#2 [typeck] type-checking `components::button::<impl at src/components/button.rs:171:1: 171:27>::render`
#3 [analysis] running analysis passes on this crate
end of query stack
